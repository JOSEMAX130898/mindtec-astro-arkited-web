---
import { fetchActiveCarrousel } from '../services/api.js';
import rectangle from '../assets/Rectangle.png';

const carrouselData = await fetchActiveCarrousel();



const slides = carrouselData?.map((item: any) => ({
  title: item.title?.replace(/\r\n/g, ' '),
  date: item.title2,
  image: item.imageUrl,
  subtitle: item.subtitle,
  button: item.button,
  link: item.link
})) || [];



// Verificar si hay slides válidos
const slidesValidos = slides.filter((slide: Slide) => {
  const hasTitle = slide.title && slide.title.trim() !== '';
  const hasImage = slide.image && slide.image.trim() !== '';
  return hasTitle && hasImage;
});


type Slide = {
  title: string;
  date: string;
  image: string;
  subtitle?: string;
  button?: string;
  link?: string;
};

const haySlides = slidesValidos.length > 0;


---

{haySlides ? (
  <div class="relative overflow-hidden lg:mt-0 ">
    <!-- Slides wrapper -->
    <div class="w-full ">
      <div id="slides" class="flex transition-transform duration-700 ease-in-out" style="transform: translateX(0%)">
        {slidesValidos.map((slide: Slide, index: number) => (
        
          <div class="relative flex flex-col items-center justify-between flex-shrink-0 w-full min-w-full pt-10 lg:py-0 md:py-0 lg:flex-row" >
            <!-- Fondo SVG -->
            <img src={rectangle.src} alt="Rectangle" class="absolute top-0 left-0 w-full h-full -z-10" />

            <!-- Imagen principal -->
            <div class="relative z-10 flex items-center justify-center order-2 w-full xl:w-8/12 md:w-1/2 lg:mb-0 lg:order-2">
              <img src={slide.image} alt="Estudiantes" class="max-h-[300px] lg:max-h-[800px] w-auto relative" />
            </div>

            <!-- Contenido -->
            <div class="z-10 flex flex-col order-1 w-full pl-8 gap-y-7 lg:mx-20 xl:w-[37%] md:w-1/2 lg:order-1">
            <div class="flex flex-col w-3/4 gap-5 lg:w-full">
              <div class="p-6 bg-verdeArk banner-cortado-home">
                <h2 class="pb-3 text-3xl font-semibold text-black border-b-2 border-black font-akira lg:text-5xl">{slide.title}</h2>
       
                <p class="mt-2 text-lg font-normal text-black lg:text-2xl">{slide.subtitle}</p>
              </div>
              <p class="mt-2 text-lg font-normal text-verdeArk lg:text-5xl font-akira">{slide.date}</p>
            
              
             <div>
              <a href={slide.link || "#"} class="inline-block px-3 py-1 text-base font-semibold text-black transition lg:px-6 lg:py-2 font-akira button-cortado-home bg-verdeArk">
                {slide.button || ""}
              </a>
             </div>
             
            </div>
       
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Dots de navegación - Posicionados para aparecer en todos los slides -->
    <div class="absolute z-30 flex gap-2 transform -translate-x-1/2 lg:left-[140px] left-[60px] lg:bottom-24 bottom-56" id="dots">
      {slidesValidos.map((_: Slide, i: number) => (
        <button
          class="w-3 h-3 transition bg-verdeArk dot hover:bg-green-300"
          data-index={i}
        ></button>
      ))}
    </div>
   
  </div>
) : (
  <div class="px-4 py-10 text-center lg:px-0">
    <p class="text-gray-500">No hay contenido disponible para el slider</p>
    <p class="mt-2 text-sm text-gray-400">Datos de la API: {carrouselData?.length || 0} elementos</p>
  </div>
)}

<script>
  function initSlider() {
    const slidesEl = document.getElementById("slides");
    const dots = document.querySelectorAll(".dot");
    
    if (slidesEl && dots.length > 0) {
      let currentIndex = 0;

      function goToSlide(i: number) {
        if (i >= 0 && i < dots.length && slidesEl) {
          currentIndex = i;
          slidesEl.style.transform = `translateX(-${currentIndex * 100}%)`;
          updateDots();
        }
      }

      function updateDots() {
        dots.forEach((dot, i) => {
          dot.classList.toggle("bg-purple-700", i === currentIndex);
          dot.classList.toggle("bg-purple-300", i !== currentIndex);
        });
      }

      // Auto-avance
      setInterval(() => {
        const nextIndex = (currentIndex + 1) % dots.length;
        goToSlide(nextIndex);
      }, 5000);

      // Click en dots
      dots.forEach((dot, i) => {
        dot.addEventListener("click", () => goToSlide(i));
      });

      updateDots();
    }
  }

  // Ejecutar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSlider);
  } else {
    initSlider();
  }
</script>
---
import Layout from "../../layouts/Layout.astro";
import BannerBlog from "../../components/BannerBlog.astro";
import BlogImg from "../../assets/BannerBlog.png";
import { fetchBlog, getBlogInfo } from "../../services/api.js";
import BannerPrincipal from "../../components/BannerPrincipal.astro";
import ImageGallery from "../../islands/ImageGallery.tsx";
interface Article {
  _id: string;
  title?: string;
  excerpt?: string;
  author?: string;
  content?: string;
  imageUrl?: string;
  imageUrl2?: string;
  imageUrl3?: string;
  imageUrl4?: string;
  imageUrl5?: string;
  published_at?: string;
  created_at?: string;
  category?: string;
  status?: number;
  urlName?: string;
}

// Configurar para SSR
export const prerender = false;

// Obtener el urlName de los par√°metros de la URL
const { urlName } = Astro.params;

// Validar que urlName existe
if (!urlName) {
  return Astro.redirect("/404");
}

// Funci√≥n para obtener el art√≠culo por urlName
async function fetchArticle(urlName: string) {
  try {
    const API_URL = "https://edtlab-cms-dev.herokuapp.com/api";
    const articleUrl = `${API_URL}/article_name/${urlName}`;

    console.log("üîç Llamando a art√≠culo:", articleUrl);

    const response = await fetch(articleUrl, {
      method: "GET",
      headers: {
        project: "arkited",
        "Content-Type": "application/json",
      },
    });

    console.log("üì° Art√≠culo response status:", response.status);
    console.log("üì° Art√≠culo response ok:", response.ok);

    if (!response.ok) {
      throw new Error(`Error al obtener art√≠culo: ${response.status} - ${response.statusText}`);
    }

    const data = await response.json();
    console.log("üì¶ Datos del art√≠culo:", data);
    return data;
  } catch (error) {
    console.error("‚ùå Error al obtener art√≠culo:", error);
    return null;
  }
}

// Obtener el art√≠culo
const article: Article | null = await fetchArticle(urlName);

// Si no hay art√≠culo, redirigir a 404
if (!article) {
  return Astro.redirect("/404");
}

// Obtener las im√°genes adicionales del blog
const additionalImages = [
  article.imageUrl2,
  article.imageUrl3,
  article.imageUrl4,
  article.imageUrl5
].filter(img => img && img.trim() !== ""); // Filtrar im√°genes vac√≠as o nulas

// Formatear la fecha
const fechaFormateada = article.published_at
  ? new Date(article.published_at).toLocaleDateString("es-ES", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
    })
  : "";

const blogData2 = await getBlogInfo();

const titulo = blogData2.blogTitle || blogData2.blogTitle2 || "Blog";
const subtitulo = blogData2.blogSubtitle || "";
const imagen = blogData2.blogImage || BlogImg.src;
const titulo2 = blogData2.blogTitle2 || "";
---

<Layout title={article.title || "Art√≠culo"}>
  <BannerPrincipal titulo={titulo} subtitulo={subtitulo} titulo2={titulo2} imagen={imagen} />
  <!-- <div class="flex justify-center">
    <img src={article.imageUrl || BlogImg.src} alt="Imagen principal" class="absolute" />
  </div> -->
  <div class="bg-white">
    <div class="w-full px-6 py-6 lg:px-0">
      <div class="w-full mx-auto lg:w-3/4 ">
        <div class="grid grid-cols-1 gap-8 lg:grid-cols-2">
          <!-- Columna izquierda: T√≠tulo, imagen y blogs relacionados -->
          <div class="">
            <!-- T√≠tulo y fecha -->
            <div>
              <h1 class="text-3xl font-normal underline text-verdeArk">{article.title}</h1>
              <p class="text-lg text-gray-500">{fechaFormateada}</p>
            </div>

            <!-- Galer√≠a de im√°genes interactiva -->
            <ImageGallery 
              client:load
              mainImage={article.imageUrl || ""} 
              additionalImages={additionalImages.filter(img => img !== undefined)}
              mainImageAlt={article.title || "Imagen principal"}
            />
          </div>

          <!-- Columna derecha: Categor√≠as y contenido del art√≠culo -->
          <div class="flex flex-col justify-between h-full">
            <div class="space-y-3">
              <!-- Categor√≠as -->
              <div class="rounded-lg">
                <div class="flex flex-wrap gap-2">
                  {
                    article.category && (
                      <button class="py-2 pl-3 pr-5 text-lg text-white transition-colors rounded bg-verdeArk hover:bg-opacity-90 button-cortado-sm">
                        {article.category}
                      </button>
                    )
                  }
                </div>
              </div>

              <!-- Contenido del art√≠culo -->
              <div class="prose prose-lg max-w-none">
                <div set:html={article.content} />
              </div>
            </div>

            <!-- Bot√≥n Salir -->
            <div class="flex justify-center mt-6">
         <a href="/blog">     <button class="flex items-center gap-2 p-4 px-10 text-lg font-normal text-white transition-colors rounded-lg bg-verdeArk hover:bg-opacity-90">
          Salir
           <svg
             xmlns="http://www.w3.org/2000/svg"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             version="1.1"
             width="24"
             height="24"
             viewBox="0 0 256 256"
             xml:space="preserve"
           >
             <g
               style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;"
               transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)"
             >
               <path
                 d="M 69.313 54.442 c -0.397 0 -0.798 -0.118 -1.147 -0.363 c -0.904 -0.636 -1.122 -1.883 -0.487 -2.786 l 10.118 -14.399 L 67.679 22.495 c -0.635 -0.904 -0.417 -2.151 0.487 -2.786 c 0.904 -0.637 2.151 -0.417 2.786 0.486 l 10.926 15.549 c 0.484 0.69 0.484 1.61 0 2.3 L 70.952 53.592 C 70.563 54.146 69.943 54.442 69.313 54.442 z"
                 style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(255, 255, 255); fill-rule: nonzero; opacity: 1;"
                 transform=" matrix(1 0 0 1 0 0) "
                 stroke-linecap="round"></path>
               <path
                 d="M 57.693 30.092 c 1.104 0 2 -0.896 2 -2 V 2 c 0 -1.104 -0.896 -2 -2 -2 H 9.759 C 9.746 0 9.735 0.003 9.722 0.004 C 9.685 0.004 9.648 0.012 9.611 0.015 c -0.122 0.009 -0.24 0.027 -0.354 0.057 C 9.211 0.083 9.168 0.098 9.124 0.113 C 9.011 0.151 8.903 0.198 8.8 0.255 C 8.775 0.269 8.747 0.274 8.723 0.289 c -0.012 0.007 -0.02 0.018 -0.031 0.025 c -0.13 0.083 -0.252 0.177 -0.36 0.287 C 8.313 0.62 8.299 0.643 8.281 0.662 C 8.196 0.757 8.12 0.859 8.053 0.969 C 8.029 1.009 8.008 1.05 7.987 1.091 C 7.935 1.192 7.893 1.297 7.858 1.407 C 7.845 1.449 7.83 1.489 7.82 1.532 C 7.783 1.683 7.759 1.838 7.759 2 v 69.787 c 0 0.17 0.028 0.333 0.068 0.49 c 0.011 0.043 0.025 0.083 0.039 0.124 c 0.04 0.123 0.091 0.239 0.152 0.35 c 0.019 0.033 0.034 0.068 0.054 0.1 c 0.086 0.135 0.185 0.26 0.3 0.371 c 0.022 0.021 0.047 0.037 0.07 0.058 c 0.102 0.09 0.214 0.169 0.333 0.237 c 0.021 0.012 0.037 0.03 0.058 0.042 l 31.016 16.213 C 40.139 89.925 40.457 90 40.775 90 c 0.359 0 0.718 -0.097 1.036 -0.289 c 0.598 -0.362 0.964 -1.012 0.964 -1.711 V 73.787 h 14.918 c 1.104 0 2 -0.896 2 -2 V 45 c 0 -1.104 -0.896 -2 -2 -2 s -2 0.896 -2 2 v 24.787 H 42.775 V 18.213 c 0 -0.745 -0.414 -1.428 -1.074 -1.772 L 17.902 4 h 37.791 v 24.092 C 55.693 29.196 56.589 30.092 57.693 30.092 z"
                 style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(255, 255, 255); fill-rule: nonzero; opacity: 1;"
                 transform=" matrix(1 0 0 1 0 0) "
                 stroke-linecap="round"></path>
               <path
                 d="M 80.241 38.894 H 47.536 c -1.104 0 -2 -0.896 -2 -2 s 0.896 -2 2 -2 h 32.705 c 1.104 0 2 0.896 2 2 S 81.346 38.894 80.241 38.894 z"
                 style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(255, 255, 255); fill-rule: nonzero; opacity: 1;"
                 transform=" matrix(1 0 0 1 0 0) "
                 stroke-linecap="round"></path>
             </g>
           </svg>
        </button>
        </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

